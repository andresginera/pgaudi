#!/usr/bin/env python
# -*- coding: utf-8 -*-

#############
#   PGaudi: A package for optimize the performance
#   of the GaudiMM suite by external parallelization

#   https://github.com/insilichem/pgaudi

#   Copyright 2019 Andrés Giner Antón, Jaime Rodriguez-Guerra
#   and Jean-Didier Marechal

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#        http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#############

"""
Module to generate the two global output file: file.gaudi-output and file.gaudi-log.
"""

import os
import gaudi
import yaml

from time import strftime


def merge_log(pcfgs, cfg):
    """
    Function to merge the gaudi-log files of the different subprocesses.

    Parameters
    ----------
    pcfgs, cfg : gaudi.parse.Settings
        `gaudi.parse.Settings` objects for the yaml files of the subprocess and the main process (input file) respectively.

    """

    log_files = [
        os.path.join(pcfg.output.path, pcfg.output.name + ".gaudi-log")
        for pcfg in pcfgs
    ]
    gaudi_log = os.path.join(cfg.output.path, cfg.output.name + ".gaudi-log")
    with open(gaudi_log, "w") as log:
        log.write("Merged log files\n################\n\n")

        for logf in log_files:
            log.write(os.path.basename(logf) + ":\n***\n")

            with open(logf, "r") as f:
                for line in f.readlines():
                    log.write(line)

            log.write("\n")


def generate_out(population, cfg):
    """
    Function to write the global gaudi-output file.

    Parameters
    ----------
    population : list
        List of unique individuals.
    cfg : gaudi.parse.Settings
        `gaudi.parse.Settings` object of the main process (the input file).

    """

    results = {
        "GAUDI.objectives": [
            "{} ({})".format(obj.name, obj.module) for obj in cfg.objectives
        ]
    }
    results["GAUDI.results"] = {}
    for ind in population:
        name = ind["name"]
        results["GAUDI.results"][name] = map(float, ind["score"])
    gaudi_output = os.path.join(cfg.output.path, cfg.output.name + ".gaudi-output")
    with open(gaudi_output, "w+") as out:
        out.write(
            "# Generated by GAUDI v{} on {}\n\n".format(
                gaudi.__version__, strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        out.write(yaml.safe_dump(results, default_flow_style=False))
