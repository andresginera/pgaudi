#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module to generate the two global output file: .gaudi-output and .gaudi-log.
"""

import os
import gaudi
import yaml

from time import strftime


def merge_log(pcfg_contents, cfg):
    """
    Function to merge the .gaudi-log files of the different subprocesses.

    Arguments
    ---------
    pcfg_contents, cfg : gaudi.parse.Settings
        gaudi.parse.Settings objects for the yaml files of the subprocess and the main process (input file) respectively.

    """
    log_files = [
        os.path.join(pcfg.output.path, pcfg.output.name + ".gaudi-log")
        for pcfg in pcfg_contents
    ]
    gaudi_log = os.path.join(cfg.output.path, cfg.output.name + ".gaudi-log")
    with open(gaudi_log, "w") as log:
        log.write("Merged log files\n################\n\n")

        for logf in log_files:
            log.write(os.path.basename(logf) + ":\n***\n")

            with open(logf, "r") as f:
                for line in f.readlines():
                    log.write(line)

            log.write("\n")


def generate_out(population, cfg):
    """
    Function to write the global .gaudi-output file.

    Arguments
    ---------
    population : list
        List of unique individuals.
    cfg : gaudi.parse.Settings
        gaudi.parse.Settings object of the main process (the input file).

    """
    results = {
        "GAUDI.objectives": [
            "{} ({})".format(obj.name, obj.module) for obj in cfg.objectives
        ]
    }
    results["GAUDI.results"] = {}
    for ind in population:
        name = ind["name"] + ".zip"
        results["GAUDI.results"][name] = map(float, ind["score"])
    gaudi_output = os.path.join(cfg.output.path, cfg.output.name + ".gaudi-output")
    with open(gaudi_output, "w+") as out:
        out.write(
            "# Generated by GAUDI v{} on {}\n\n".format(
                gaudi.__version__, strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        out.write(yaml.safe_dump(results, default_flow_style=False))


# def generate_out(selected_pop, name, cfg):
#     with open(input_yaml, "r") as f:
#         data_loaded = yaml.load(f)
#     objectives = []
#     for element in data_loaded["objectives"]:
#         objectives.append((element["name"], element["module"]))
#     with open(name + ".gaudi-output", "w") as out:
#         out.write(
#             "# Generated by GAUDI v{} on {}\n\n".format(
#                 gaudi.__version__, strftime("%Y-%m-%d %H:%M:%S")
#             )
#         )
#         out.write("GAUDI.objectives:\n")
#         for obj in objectives:
#             out.write("- {} ({})\n".format(obj[0], obj[1]))
#         out.write("GAUDI.results:\n")
#         for ind in selected_pop:
#             out.write("  {}.zip:\n".format(ind["name"]))
#             gaudi_file = glob.glob(
#                 "{}/*_{}.gaudi".format(ind["process"], ind["number"])
#             )
#             with open(gaudi_file[0], "r") as f:
#                 data = yaml.load(f)
#             for i in data["score"]:
#                 out.write("  - {}\n".format(i))

