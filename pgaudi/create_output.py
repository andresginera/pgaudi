#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import gaudi
import yaml
import glob
import subprocess

from time import strftime


def merge_log(name):
    log_files = [fn for fn in os.listdir(".") if fn.endswith(".gaudi-log")]
    with open(name + ".gaudi-log", "w") as log:
        log.write("Merged log files\n################\n\n")

        for f in log_files:
            log.write(f + ":\n***\n")
            with open(f, "r") as in_file:
                for line in in_file.readlines():
                    log.write(line)
            log.write("\n")


def generate_out(selected_pop, name, input_yaml):
    with open(input_yaml, "r") as f:
        data_loaded = yaml.load(f)
    objectives = []
    for element in data_loaded["objectives"]:
        objectives.append((element["name"], element["module"]))
    with open(name + ".gaudi-output", "w") as out:
        out.write(
            "# Generated by GAUDI v{} on {}\n\n".format(
                gaudi.__version__, strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        out.write("GAUDI.objectives:\n")
        for obj in objectives:
            out.write("- {} ({})\n".format(obj[0], obj[1]))
        out.write("GAUDI.results:\n")
        for ind in selected_pop:
            out.write("  {}.zip:\n".format(ind["name"]))
            gaudi_file = glob.glob(
                "{}/*_{}.gaudi".format(ind["process"], ind["number"])
            )
            with open(gaudi_file[0], "r") as f:
                data = yaml.load(f)
            for i in data["score"]:
                out.write("  - {}\n".format(i))


def moving_zip(dir_list):
    for directory in dir_list:
        files = glob.glob("{}*.*".format(directory))
        for f in files:
            subprocess.call("mv {} {}/".format(f, directory), shell=True)
